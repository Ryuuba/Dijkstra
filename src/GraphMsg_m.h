//
// Generated file, do not edit! Created by nedtool 5.6 from GraphMsg.msg.
//

#ifndef __GRAPHMSG_M_H
#define __GRAPHMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
  #include <utility>
  #include <memory>
  #include "Event.h"
  typedef std::list<std::pair<int, double>> MatrixEntry;
  typedef std::shared_ptr<std::vector<MatrixEntry>> AdjacencyMatrix;
// }}

/**
 * Class generated from <tt>GraphMsg.msg:12</tt> by nedtool.
 * <pre>
 * message GraphMsg
 * {
 *     name = "graph";
 *     kind = EventKind::GRAPH;
 *     AdjacencyMatrix m;
 * }
 * </pre>
 */
class GraphMsg : public ::omnetpp::cMessage
{
  protected:
    AdjacencyMatrix m;

  private:
    void copy(const GraphMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const GraphMsg&);

  public:
    GraphMsg(const char *name=nullptr, short kind=0);
    GraphMsg(const GraphMsg& other);
    virtual ~GraphMsg();
    GraphMsg& operator=(const GraphMsg& other);
    virtual GraphMsg *dup() const override {return new GraphMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual AdjacencyMatrix& getM();
    virtual const AdjacencyMatrix& getM() const {return const_cast<GraphMsg*>(this)->getM();}
    virtual void setM(const AdjacencyMatrix& m);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const GraphMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, GraphMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __GRAPHMSG_M_H

