//
// Generated file, do not edit! Created by nedtool 5.6 from NeighborhoodMsg.msg.
//

#ifndef __NEIGHBORHOODMSG_M_H
#define __NEIGHBORHOODMSG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
  #include <tuple>
  #include <list>
  #include <memory>
  #include "Event.h"
  typedef std::tuple<int, int, double> NeighborhoodEntry;
  typedef std::shared_ptr<std::list<NeighborhoodEntry>> Neighborhood;
// }}

/**
 * Class generated from <tt>NeighborhoodMsg.msg:12</tt> by nedtool.
 * <pre>
 * message NeighborhoodMsg
 * {
 *     name = "neighborhood";
 *     kind = EventKind::NEIGHBORHOOD;
 *     int sender;
 *     int subtreeSize;
 *     Neighborhood n;
 * }
 * </pre>
 */
class NeighborhoodMsg : public ::omnetpp::cMessage
{
  protected:
    int sender;
    int subtreeSize;
    Neighborhood n;

  private:
    void copy(const NeighborhoodMsg& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NeighborhoodMsg&);

  public:
    NeighborhoodMsg(const char *name=nullptr, short kind=0);
    NeighborhoodMsg(const NeighborhoodMsg& other);
    virtual ~NeighborhoodMsg();
    NeighborhoodMsg& operator=(const NeighborhoodMsg& other);
    virtual NeighborhoodMsg *dup() const override {return new NeighborhoodMsg(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSender() const;
    virtual void setSender(int sender);
    virtual int getSubtreeSize() const;
    virtual void setSubtreeSize(int subtreeSize);
    virtual Neighborhood& getN();
    virtual const Neighborhood& getN() const {return const_cast<NeighborhoodMsg*>(this)->getN();}
    virtual void setN(const Neighborhood& n);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NeighborhoodMsg& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NeighborhoodMsg& obj) {obj.parsimUnpack(b);}


#endif // ifndef __NEIGHBORHOODMSG_M_H

